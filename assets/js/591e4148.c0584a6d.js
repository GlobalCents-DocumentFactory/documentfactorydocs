"use strict";(self.webpackChunkdocumentfactorydocs=self.webpackChunkdocumentfactorydocs||[]).push([[5634],{6326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=t(4848),a=t(8453);const s={sidebar_position:2},i="Naming Pattern",o={id:"references/namingpattern",title:"Naming Pattern",description:"The namingpattern property is used to define the pattern for naming documents or files dynamically.",source:"@site/docs/references/namingpattern.mdx",sourceDirName:"references",slug:"/references/namingpattern",permalink:"/documentfactorydocs/docs/references/namingpattern",draft:!1,unlisted:!1,editUrl:"https://github.com/GlobalCents-DocumentFactory/documentfactorydocs/tree/main/docs/references/namingpattern.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Artifact",permalink:"/documentfactorydocs/docs/references/artifact"}},c={},d=[];function m(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"naming-pattern",children:"Naming Pattern"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"namingpattern"})," property is used to define the pattern for naming documents or files dynamically.\nThis property is essential for ensuring consistency, uniqueness, and readability in filenames across various\ndocument processing scenarios. Both static and dynamic metadata-based data can be used to build a pattern."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="pipeline.json"',children:'{\n  "metadata": "{\\"document_name\\":\\"Output Document\\"}",\n  "merge": true,\n  "mergesettings": {\n    "saveformat": "pdf",\n    "namingpattern": "New {{ document_name }}"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example the ",(0,r.jsx)(n.code,{children:"namingpattern"})," property, which is used in the merge process, is set to ",(0,r.jsx)(n.code,{children:"New {{ document_name }}"}),',\nand indicates that the output documents will be named using the specified pattern, where "document_name" will be replaced with an appropriate value\nspecified in ',(0,r.jsx)(n.code,{children:"metadata"}),".\nYou can find more detailed information about the use of metadata in the section ",(0,r.jsx)(n.a,{href:"/documentfactorydocs/docs/pipeline/metadata",children:(0,r.jsx)(n.strong,{children:"Metadata"})}),".\nAdjust the pattern as needed to fit your naming requirements."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);