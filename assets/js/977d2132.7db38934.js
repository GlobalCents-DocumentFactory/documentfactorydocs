"use strict";(self.webpackChunkdocumentfactorydocs=self.webpackChunkdocumentfactorydocs||[]).push([[7642],{9921:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=t(4848),s=t(8453);const i={sidebar_position:3,title:"Terminology & Concepts"},r="Terminology & Concepts",c={id:"getting-started/terminology_and_concepts",title:"Terminology & Concepts",description:"This section provides definitions and explanations of fundamental terms and concepts used throughout the documentation.",source:"@site/docs/getting-started/terminology_and_concepts.mdx",sourceDirName:"getting-started",slug:"/getting-started/terminology_and_concepts",permalink:"/documentfactorydocs/docs/getting-started/terminology_and_concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/GlobalCents-DocumentFactory/documentfactorydocs/tree/main/docs/getting-started/terminology_and_concepts.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Terminology & Concepts"},sidebar:"tutorialSidebar",previous:{title:"Typical Workflow",permalink:"/documentfactorydocs/docs/getting-started/typical_workflow"},next:{title:"Configuration",permalink:"/documentfactorydocs/docs/category/configuration"}},a={},d=[{value:"Pipeline",id:"pipeline",level:2},{value:"Workflow",id:"workflow",level:2},{value:"Task",id:"task",level:2}];function l(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"terminology--concepts",children:"Terminology & Concepts"})}),"\n",(0,o.jsx)(n.p,{children:"This section provides definitions and explanations of fundamental terms and concepts used throughout the documentation.\nIt serves as a reference point for understanding how DocumentFactory works at a conceptual level."}),"\n",(0,o.jsx)(n.h2,{id:"pipeline",children:"Pipeline"}),"\n",(0,o.jsxs)(n.p,{children:["A pipeline is the core configuration element that defines how documents are processed in ",(0,o.jsx)(n.strong,{children:"DocumentFactory"}),". I\nIt specifies the sequence of operations applied to incoming files, enabling a flexible and automated transformation workflow."]}),"\n",(0,o.jsx)(n.p,{children:"The pipeline configuration includes the following logical components:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Processors"})," \u2013 define the primary operations on individual files, such as format conversion or Optical Character Recognition (OCR)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Merge"})," \u2013 controls whether multiple documents should be combined into a single output file."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Postprocessors"})," \u2013 specify actions that are applied after the main processing steps, such as adding watermarks or compressing output files."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.mermaid,{value:"graph LR;\n    doc_1(pdf)--\x3ep_1_1(processor 1)--\x3ep_2_1(processor 2)--\x3em(Merge)--\x3er_1(pdf,word,html...)--\x3epp(postprocessor 1)--\x3er_2(pdf,word,html...)\n    doc_2(word)--\x3ep_1_2(processor 1)--\x3ep_2_2(processor 2)--\x3em\n    doc_3(powerpoint)--\x3ep_1_3(processor 1)--\x3ep_2_3(processor 2)--\x3em"}),"\n",(0,o.jsx)(n.p,{children:"DocumentFactory uses the pipeline to determine exactly what should happen to each document and in what order. Whether converting documents, enhancing them for search, or preparing them for long-term archiving, the pipeline provides a structured and reusable way to define processing rules."}),"\n",(0,o.jsx)(n.p,{children:"The pipeline is provided as a JSON-formatted input parameter when starting a processing task. It can be created and modified manually or through available user interfaces."}),"\n",(0,o.jsx)(n.p,{children:"In essence, the pipeline is the central control point that guides document transformation\u2014enabling automation, consistency, and efficiency across all processed content."}),"\n",(0,o.jsx)(n.h2,{id:"workflow",children:"Workflow"}),"\n",(0,o.jsx)(n.p,{children:"A workflow is the runtime process in which a defined pipeline is applied to actual input data. It represents the execution phase,\nwhere documents or folder structures are processed step by step according to the pipeline\u2019s logic. Each workflow instance is tied\nto a specific set of input and operates independently to produce results."}),"\n",(0,o.jsx)(n.h2,{id:"task",children:"Task"}),"\n",(0,o.jsx)(n.p,{children:"A task is the smallest unit of execution within a workflow. It represents a discrete operation performed on a document\nor a group of documents. During execution, the workflow is decomposed into multiple tasks, one for each combination\nof defined operations and target documents, enabling parallelism and precise control over processing."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);