"use strict";(self.webpackChunkdocumentfactorydocs=self.webpackChunkdocumentfactorydocs||[]).push([[7417],{5908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>q,contentTitle:()=>N,default:()=>S,frontMatter:()=>k,metadata:()=>V,toc:()=>A});var a=n(4848),r=n(8453),s=n(6540),i=n(4164),l=n(3104),o=n(6347),c=n(205),u=n(7485),d=n(1682),h=n(679);function p(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return p(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=m(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[o,u]=b({queryString:n,groupId:a}),[d,p]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,h.Dv)(n);return[a,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),g=(()=>{const e=o??d;return f({value:e,tabValues:r})?e:null})();(0,c.A)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!f({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),p(e)}),[u,p,r]),tabValues:r}}var j=n(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=o[n].value;a!==r&&(u(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,a.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>c.push(e),onKeyDown:h,onClick:d,...s,className:(0,i.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:l.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function w(e){const t=g(e);return(0,a.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,a.jsx)(v,{...t,...e}),(0,a.jsx)(y,{...t,...e})]})}function T(e){const t=(0,j.A)();return(0,a.jsx)(w,{...e,children:p(e.children)},String(t))}const D={tabItem:"tabItem_Ymn6"};function I(e){let{children:t,hidden:n,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(D.tabItem,r),hidden:n,children:t})}n(8774),n(1432);const k={sidebar_position:1},N="Metadata",V={id:"pipeline/metadata",title:"Metadata",description:"Document Factory allows to insert dynamic values by replacing tags with corresponding entries from a metadata object.",source:"@site/docs/pipeline/metadata.mdx",sourceDirName:"pipeline",slug:"/pipeline/metadata",permalink:"/documentfactorydocs/docs/pipeline/metadata",draft:!1,unlisted:!1,editUrl:"https://github.com/GlobalCents-DocumentFactory/documentfactorydocs/tree/main/docs/pipeline/metadata.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Run",permalink:"/documentfactorydocs/docs/getting-started/run"},next:{title:"Merge",permalink:"/documentfactorydocs/docs/pipeline/merge"}},q={},A=[{value:"<code>metadata</code>",id:"metadata-1",level:2},{value:"Basics usage",id:"basics-usage",level:2},{value:"Nested Metadata Object",id:"nested-metadata-object",level:2},{value:"Modifying output with filters",id:"modifying-output-with-filters",level:2},{value:"Extras",id:"extras",level:2}];function E(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"metadata",children:"Metadata"})}),"\n",(0,a.jsx)(t.p,{children:"Document Factory allows to insert dynamic values by replacing tags with corresponding entries from a metadata object.\nThese tags can be inserted into various parts of the document, including the content, title, and watermark text.\nThis feature enables the creation of personalized and contextually accurate documents."}),"\n",(0,a.jsx)(t.h2,{id:"metadata-1",children:(0,a.jsx)(t.code,{children:"metadata"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"metadata"})," property, located at the root of the pipeline, defines the JSON string that represents an object containing\nmetadata used to replace tags in the document. Both plain and nested objects can be used."]}),"\n",(0,a.jsx)(t.p,{children:"The replacement of tags based on the JSON metadata, as well as additional settings, are determined within the processors\nor postprocessors stages of the pipeline configuration. These stages handle the specifics of how and when the tags are\nsubstituted with the actual metadata values."}),"\n",(0,a.jsxs)(t.p,{children:["For more detailed information on configuring and using metadata within processors and postprocessors, please refer\nto the ",(0,a.jsx)(t.a,{href:"/documentfactorydocs/docs/pipeline/processors/mergemeta",children:(0,a.jsx)(t.strong,{children:"Mergemeta"})})," section."]}),"\n",(0,a.jsx)(t.h2,{id:"basics-usage",children:"Basics usage"}),"\n",(0,a.jsxs)(T,{children:[(0,a.jsx)(I,{value:"json",label:"Pipeline",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",metastring:'title="pipeline.json"',children:'{\n    "metadata": "{\\"title\\":\\"Document Title\\",\\"author\\":\\"John Doe\\",\\"date\\":\\"2023-10-10\\"}",\n    "processors": [\n        {\n            "actionmergemeta": true,\n            "settingsmergemeta": {\n                "mergenullorempty": false\n            }\n        }\n    ]\n}\n'})})}),(0,a.jsx)(I,{value:"input",label:"Input",children:(0,a.jsx)("pre",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)("b",{children:"Title:"})," {{ title }}\n",(0,a.jsx)("b",{children:"Author:"})," {{ author }}\n",(0,a.jsx)("b",{children:"Date:"})," {{ date }}"]})})}),(0,a.jsx)(I,{value:"output",label:"Output",children:(0,a.jsx)("pre",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)("b",{children:"Title:"})," Document Title\n",(0,a.jsx)("b",{children:"Author:"})," John Doe\n",(0,a.jsx)("b",{children:"Date:"})," 2023-10-10"]})})})]}),"\n",(0,a.jsx)(t.h2,{id:"nested-metadata-object",children:"Nested Metadata Object"}),"\n",(0,a.jsxs)(T,{children:[(0,a.jsx)(I,{value:"json",label:"Pipeline",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",metastring:'title="pipeline.json"',children:'{\n    "metadata": "{\\"document\\":{\\"title\\":\\"Document Title\\",\\"details\\":{\\"author\\":\\"Jane Doe\\",\\"date\\":\\"2023-10-10\\"}}}"\n    "processors": [\n        {\n            "actionmergemeta": true,\n            "settingsmergemeta": {\n                "mergenullorempty": false\n            }\n        }\n    ]\n}\n'})})}),(0,a.jsx)(I,{value:"input",label:"Input",children:(0,a.jsx)("pre",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)("b",{children:"Title:"})," {{ document.title }}\n",(0,a.jsx)("b",{children:"Author:"})," {{ document.details.author }}\n",(0,a.jsx)("b",{children:"Date:"})," {{ document.details.date }}"]})})}),(0,a.jsx)(I,{value:"output",label:"Output",children:(0,a.jsx)("pre",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)("b",{children:"Title:"})," Document Title\n",(0,a.jsx)("b",{children:"Author:"})," Jane Doe\n",(0,a.jsx)("b",{children:"Date:"})," 2023-10-10"]})})})]}),"\n",(0,a.jsx)(t.h2,{id:"modifying-output-with-filters",children:"Modifying output with filters"}),"\n",(0,a.jsx)(t.p,{children:"The filters are used to modify the output of variables and objects. To apply filters to an output,\nadd the filter and any filter parameters within the output's curly brace delimiters, preceded by a pipe character.\nMultiple filters can be used on one output. They\u2019re parsed from left to right."}),"\n",(0,a.jsxs)(T,{children:[(0,a.jsx)(I,{value:"json",label:"Pipeline",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",metastring:'title="pipeline.json"',children:'{\n    "metadata": "{\\"document\\":{\\"title\\":\\"Document Title\\"}}",\n    "processors": [\n        {\n            "actionmergemeta": true,\n            "settingsmergemeta": {\n                "mergenullorempty": false\n            }\n        }\n    ]\n}\n'})})}),(0,a.jsx)(I,{value:"input",label:"Input",default:!0,children:(0,a.jsx)("pre",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)("b",{children:"Title:"})," {{ product.title | upcase | remove: 'TITLE' }}"]})})}),(0,a.jsx)(I,{value:"output",label:"Output",children:(0,a.jsx)("pre",{children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)("b",{children:"Title:"})," DOCUMENT"]})})})]}),"\n",(0,a.jsx)(t.h2,{id:"extras",children:"Extras"}),"\n",(0,a.jsx)(t.p,{children:"The metadata functionality is built on Liquid, a powerful and flexible templating language created by Shopify.\nLiquid allows for sophisticated templating features, enabling the dynamic insertion of metadata values into documents."}),"\n",(0,a.jsxs)(t.p,{children:["For creating more complex solutions with the metadata property, refer to the ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.a,{href:"https://shopify.dev/docs/api/liquid#liquid_basics",children:"original Liquid documentation"})}),".\nIt provides comprehensive details on using Liquid's advanced features, including filters, loops,\nand conditionals, to achieve sophisticated templating logic."]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"Make an examples with watermark text or output file name."})})]})}function S(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(E,{...e})}):E(e)}}}]);