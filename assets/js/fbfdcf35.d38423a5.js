"use strict";(self.webpackChunkdocumentfactorydocs=self.webpackChunkdocumentfactorydocs||[]).push([[566],{1359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var r=n(4848),s=n(8453),o=n(8774);const i={sidebar_position:6},c="Merge Meta",d={id:"pipeline/processors/mergemeta",title:"Merge Meta",description:"actionmergemeta",source:"@site/versioned_docs/version-24.0.0/pipeline/processors/mergemeta.mdx",sourceDirName:"pipeline/processors",slug:"/pipeline/processors/mergemeta",permalink:"/documentfactorydocs/docs/24.0.0/pipeline/processors/mergemeta",draft:!1,unlisted:!1,editUrl:"https://github.com/GlobalCents-DocumentFactory/documentfactorydocs/tree/main/versioned_docs/version-24.0.0/pipeline/processors/mergemeta.mdx",tags:[],version:"24.0.0",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Watermark",permalink:"/documentfactorydocs/docs/24.0.0/pipeline/processors/watermark"},next:{title:"PDF Settings",permalink:"/documentfactorydocs/docs/24.0.0/pipeline/processors/pdfsettings"}},a={},l=[{value:"<code>actionmergemeta</code>",id:"actionmergemeta",level:2},{value:"<code>settingsmergemeta</code>",id:"settingsmergemeta",level:2},{value:"<code>mergenullorempty</code>",id:"mergenullorempty",level:3},{value:"<code>removeemptylines</code>",id:"removeemptylines",level:3},{value:"<code>usestrictreplacement</code>",id:"usestrictreplacement",level:3},{value:"<code>wordtrackchanges</code>",id:"wordtrackchanges",level:3}];function m(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"merge-meta",children:"Merge Meta"})}),"\n",(0,r.jsx)(t.h2,{id:"actionmergemeta",children:(0,r.jsx)(t.code,{children:"actionmergemeta"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"actionmergemeta"})," property activates the metadata merging feature within the document processing pipeline.\nSetting this property to ",(0,r.jsx)(t.code,{children:"true"})," within the ",(0,r.jsx)(t.code,{children:"processors"})," or ",(0,r.jsx)(t.code,{children:"postprocess"})," arrays enables the build process to inspect\nthe documents and replace the ",(0,r.jsx)(t.a,{href:"/documentfactorydocs/docs/24.0.0/pipeline/metadata",children:(0,r.jsx)(t.strong,{children:"metadata tags"})}),". If this property is set to ",(0,r.jsx)(t.code,{children:"false"}),", no replacements will take place."]}),"\n",(0,r.jsx)(t.h2,{id:"settingsmergemeta",children:(0,r.jsx)(t.code,{children:"settingsmergemeta"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"settingsmergemeta"})," property provides configuration parameters for the metadata merging action.\nThe ",(0,r.jsx)(t.code,{children:"settingsmergemeta"})," property can contain the following properties:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(o.A,{to:"#mergenullorempty",children:(0,r.jsx)(t.code,{children:"mergenullorempty"})})," - controls whether metadata fields that are null or empty\nshould be included in the merging process."]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(o.A,{to:"#removeemptylines",children:(0,r.jsx)(t.code,{children:"namingpattern"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(o.A,{to:"#usestrictreplacement",children:(0,r.jsx)(t.code,{children:"settingswordmerge"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(o.A,{to:"#wordtrackchanges",children:(0,r.jsx)(t.code,{children:"saveformat"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"mergenullorempty",children:(0,r.jsx)(t.code,{children:"mergenullorempty"})}),"\n",(0,r.jsxs)(t.p,{children:["Property ",(0,r.jsx)(t.code,{children:"mergenullorempty"})," controls whether metadata fields that are null or empty should be included\nin the merging process.\nTo optimize the process by excluding irrelevant data and retaining tags in the output document if they are invalid or empty,\nset this property to ",(0,r.jsx)(t.code,{children:"false"}),". This skips the merging for null or empty metadata fields.\nAlternatively, to ensure that all metadata fields are included, even if they have null or empty values, set this property to ",(0,r.jsx)(t.code,{children:"true"}),".\nThis option processes all tags in the replacement list and removes any invalid replacement tags from the source document."]}),"\n",(0,r.jsx)(t.h3,{id:"removeemptylines",children:(0,r.jsx)(t.code,{children:"removeemptylines"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"Add description"})}),"\n",(0,r.jsx)(t.h3,{id:"usestrictreplacement",children:(0,r.jsx)(t.code,{children:"usestrictreplacement"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"Add description"})}),"\n",(0,r.jsx)(t.h3,{id:"wordtrackchanges",children:(0,r.jsx)(t.code,{children:"wordtrackchanges"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"Add description"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);